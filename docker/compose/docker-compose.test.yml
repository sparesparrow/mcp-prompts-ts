# Test environment for MCP Prompts
# This file configures a testing environment with the necessary services
# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json

version: '3.8'

services:
  # Override the base service with test configuration
  mcp-prompts:
    image: sparesparrow/mcp-prompts:test
    container_name: mcp-prompts-test
    build:
      context: .
      dockerfile: docker/Dockerfile.testing
    environment:
      - NODE_ENV=test
      - PORT=3000
      - HOST=0.0.0.0
      - STORAGE_TYPE=memory
      - PROMPTS_DIR=/app/data/prompts
      - BACKUPS_DIR=/app/data/backups
      - LOG_LEVEL=debug
      - TEST_MODE=true
    volumes:
      - ../../src:/app/src
      - ../../tests:/app/tests
      - ../../package.json:/app/package.json
      - ../../tsconfig.json:/app/tsconfig.json
      - ../../jest.config.js:/app/jest.config.js
      - mcp-prompts-test-data:/app/data
      - mcp-prompts-test-results:/app/test-results
    ports:
      - '9323:9323' # Test reporting port
    command: npm run test
    healthcheck:
      test: ['CMD', 'node', '-e', 'process.exit(0)'] # Simple healthcheck for test container
      interval: 10s
      timeout: 3s
      retries: 3
    restart: 'no' # Do not restart test containers automatically
    networks:
      - mcp-network
    profiles:
      - test
      - health-check

  # Test PostgreSQL database if needed
  postgres-test:
    image: postgres:14-alpine
    container_name: mcp-prompts-postgres-test
    environment:
      - POSTGRES_USER=mcp_test
      - POSTGRES_PASSWORD=mcp_test_password
      - POSTGRES_DB=mcp_test
    volumes:
      - mcp-prompts-postgres-test-data:/var/lib/postgresql/data
      - ../../docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U mcp_test']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: 'no' # Do not restart test database automatically
    networks:
      - mcp-network

volumes:
  mcp-prompts-test-data:
    name: mcp-prompts-test-data
  mcp-prompts-test-results:
    name: mcp-prompts-test-results
  mcp-prompts-postgres-test-data:
    name: mcp-prompts-postgres-test-data

networks:
  mcp-network:
    driver: bridge

# Health check test service
test-runner:
  build:
    context: .
    dockerfile: docker/Dockerfile.testing
  environment:
    - NODE_ENV=test
    - TEST_MODE=true
    - TEST_DOCKER_HEALTH=true
  command: npm run test:integration
  depends_on:
    mcp-prompts:
      condition: service_healthy
  profiles:
    - health-check
